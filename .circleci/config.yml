version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@3.0.0
  aws-cli: circleci/aws-cli@0.1.9
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0
  # windows: circleci/windows@2.4.0
  # Added windows orb to try creating a windows environment to run the ReSharper CLT.
  # e.g set the job executor as windows/default.
  # Errors with "Error response from daemon: pull access denied for windows-server-2019-vs2019, repository does not exist or may require 'docker login': denied: requested access to the resource is denied"

executors:
  docker-python:
      docker:
        - image: circleci/python:3.7
  docker-terraform:
     docker:
       -  image: "hashicorp/terraform:light"
  docker-dotnet:
     docker:
       - image: mcr.microsoft.com/dotnet/core/sdk:3.1
commands:
  terraform-init-then-apply:
    description: "Initializes and applies terraform configuration"
    parameters:
      aws-account:
        type: string
      aws-role-name:
        type: string
    steps:
       - run:
          command: |
              cd ./terraform/
              terraform get -update=true
              terraform init
          name: get and init
       - run:
          name: apply
          command: |
            cd ./terraform/
            terraform apply -auto-approve

  deploy-env:
    description: "Sets ecs-deploy to update a service with a target docker image"
    parameters:
      cluster-name:
        type: string
      service-name:
        type: string
      image-tag:
        type: string
      aws-account:
        type: string
      aws-role-name:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: <<parameters.aws-role-name>>
      - run:
          name: Install ecs deploy
          command: |
            sudo pip install ecs-deploy
      - run:
          name: Premote target image
          command: |
            ecs deploy \
            --no-deregister \
            --profile default \
            --timeout 1800 \
            << parameters.cluster-name >> \
            << parameters.service-name >> \
            -t << parameters.image-tag >>
          no_output_timeout: 30m
  build_and_push_image:
    parameters:
      account-url:
        default: AWS_ECR_ACCOUNT_URL
        type: env_var_name
      region:
        default: AWS_REGION
        type: env_var_name
      dockerfile:
        default: Dockerfile
        type: string
      path:
        default: .
        type: string
      repo:
        type: string
      tag:
        default: latest
        type: string
      aws-account:
        type: string
      aws-role-name:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: <<parameters.aws-role-name>>
      - run:
          name: authorize docker to access aws ecr
          command: |
            # aws ecr get-login returns a login command w/ a temp token
            LOGIN_COMMAND=$(aws ecr get-login --no-include-email --region \
            $<<parameters.region>> --profile default) # default default default default default default default
            # save it to an env var & use that env var to login
            $LOGIN_COMMAND
      - aws-ecr/build-image:
          account-url: <<parameters.account-url>>
          dockerfile: <<parameters.dockerfile>>
          path: <<parameters.path>>
          repo: <<parameters.repo>>
          tag: <<parameters.tag>>
      - aws-ecr/push-image:
          account-url: <<parameters.account-url>>
          repo: <<parameters.repo>>
          tag: <<parameters.tag>>

jobs:
  terraform-init-and-apply-to-development:
    executor: docker-terraform
    steps:
      - checkout
      - terraform-init-then-apply:
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
  terraform-init-and-apply-to-staging:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_STAGING
  terraform-init-and-apply-to-production:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_PRODUCTION
  assume-role-development:
     executor: docker-python
     steps:
       - checkout
       - aws_assume_role/assume_role:
             account: $AWS_ACCOUNT_DEVELOPMENT
             profile_name: default
             role: 'LBH_Circle_CI_Deployment_Role'
  assume-role-staging:
     executor: docker-python
     steps:
       - checkout
       - aws_assume_role/assume_role:
             account: $AWS_ACCOUNT_STAGING
             profile_name: default
             role: 'LBH_Circle_CI_Deployment_Role'
  assume-role-production:
     executor: docker-python
     steps:
       - checkout
       - aws_assume_role/assume_role:
             account: $AWS_ACCOUNT_PRODUCTION
             profile_name: default
             role: 'LBH_Circle_CI_Deployment_Role'
  check-code-formatting:
    executor: docker-dotnet
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dotnet format
          command: dotnet tool install dotnet-format --tool-path ./dotnet-format-local/
      - run:
          name: Run formatter check
          command: ./dotnet-format-local/dotnet-format --dry-run --check
  run-static-code-analysis:
    executor: docker-dotnet
    # executor: windows/default
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install ReSharper Command Line Tools
          command: dotnet add /root/project/base-api package JetBrains.ReSharper.CommandLineTools --version 2020.1.2
          # Adding the command line tools as a package install (not available as a tool yet).
          # Lengthy installation but adds the package successfully.
      - run:
          name: Run Code inspection
          command: inspectcode.sh base-api.sln
          # Found documentation that mentions that the linux equivalent to run the code inspection command: inspectcode.sh
          #  Errors with: /bin/bash: inspectcode.sh: command not found

  build-and-test:
    executor: docker-python
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build
          command: docker-compose build base-api-test
      - run:
         name: Run tests
         command: docker-compose run base-api-test
  deploy-to-development:
    executor: docker-python
    steps:
      - deploy-env:
          cluster-name: $AWS_CLUSTER_DEV
          service-name: $AWS_SERVICE_DEV
          image-tag: "$CIRCLE_SHA1"
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
  deploy-to-staging:
    docker:
      - image: circleci/python:3.7
    steps:
      - deploy-env:
          cluster-name: $AWS_CLUSTER_STAGING
          service-name: $AWS_SERVICE_STAGING
          image-tag: "$CIRCLE_SHA1"
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_STAGING
  deploy-to-production:
    executor: docker-python
    steps:
      - deploy-env:
          cluster-name: $AWS_CLUSTER_PROD
          service-name: $AWS_SERVICE_PROD
          image-tag: "$CIRCLE_SHA1"
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_PRODUCTION
  build_and_push_image_development:
    executor: aws-ecr/default
    steps:
      - build_and_push_image:
          dockerfile: ./base-api/Dockerfile
          path: ./base-api
          account-url: AWS_ECR_HOST_DEVELOPMENT
          repo: $AWS_ECR_PATH_DEV
          region: AWS_REGION
          tag: "${CIRCLE_SHA1}"
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
  build_and_push_image_staging:
    executor: aws-ecr/default
    steps:
      - build_and_push_image:
          dockerfile: ./base-api/Dockerfile
          path: $PROJECT_PATH
          account-url: AWS_ECR_HOST_STAGING
          repo: $AWS_ECR_PATH_STAGING
          region: AWS_REGION
          tag: "${CIRCLE_SHA1}"
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_STAGING
  build_and_push_image_production:
    executor: aws-ecr/default
    steps:
      - build_and_push_image:
          dockerfile: ./base-api/Dockerfile
          path: $PROJECT_PATH
          account-url: AWS_ECR_HOST_PRODUCTION
          repo: $AWS_ECR_PATH_PRODUCTION
          region: AWS_REGION
          tag: "${CIRCLE_SHA1}"
          aws-role-name: 'LBH_Circle_CI_Deployment_Role'
          aws-account: $AWS_ACCOUNT_PRODUCTION

workflows:
  check-and-deploy:
      jobs:
      - check-code-formatting
      - run-static-code-analysis
      - build-and-test
      - assume-role-development:
          context: api-assume-role-development-context
          requires:
              - build-and-test
          filters:
             branches:
               only: development
      - terraform-init-and-apply-to-development:
          context: api-assume-role-development-context
          requires:
              - assume-role-development
          filters:
             branches:
               only: development
      - build_and_push_image_development:
          context: api-assume-role-development-context
          requires:
            - build-and-test
            - terraform-init-and-apply-to-development
          filters:
            branches:
              only: development
      - deploy-to-development:
          context: api-assume-role-development-context
          requires:
            - build_and_push_image_development
          filters:
            branches:
              only: development
  # check-and-deploy-staging-and-production:
  #     jobs:
  #     - build-and-test:
  #         filters:
  #           branches:
  #             only: master
  #     - assume-role-staging:
  #         context: api-assume-role-staging-context
  #         requires:
  #             - build-and-test
  #         filters:
  #            branches:
  #              only: master
  #     - terraform-init-and-apply-to-staging:
  #         requires:
  #           - assume-role-staging
  #         filters:
  #           branches:
  #             only: master
  #     - build_and_push_image_staging:
  #         context: api-assume-role-staging-context
  #         requires:
  #           - build-and-test
  #         filters:
  #           branches:
  #             only: master
  #     - deploy-to-staging:
  #         context: api-assume-role-staging-context
  #         requires:
  #           - build_and_push_image_staging
  #         filters:
  #           branches:
  #             only: master
  #     - permit-production-terraform-release:
  #         type: approval
  #         requires:
  #           - deploy-to-staging
  #     - assume-role-production:
  #         context: api-assume-role-production-context
  #         requires:
  #             - permit-production-terraform-release
  #         filters:
  #            branches:
  #              only: master
  #     - terraform-init-and-apply-to-production:
  #         requires:
  #           - assume-role-production
  #         filters:
  #           branches:
  #             only: master
  #     - permit-production-release:
  #         type: approval
  #         requires:
  #           - deploy-to-staging
  #         filters:
  #           branches:
  #             only: master
  #     - build_and_push_image_production:
  #         context: api-assume-role-production-context
  #         requires:
  #           - permit-production-release
  #         filters:
  #           branches:
  #             only: master
  #     - deploy-to-production:
  #         context: api-assume-role-production-context
  #         requires:
  #           - build_and_push_image_production
  #         filters:
  #           branches:
  #             only: master
